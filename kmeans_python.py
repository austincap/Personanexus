#for personality nexus

#subject = entity, vector describes percent voted alike
#for intj, reagan, ice, enfp
INTJData = [1.0, .3, .7, .4]
ReaganData = [.3, 1.0, .6, .8]
IceData = [.7, .6, 1.0, .15]
ENFPData = [.4, .8, .15, 1.0]


import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from sklearn.cluster import KMeans
import numpy as np
from sklearn.cluster import AffinityPropagation
from sklearn import metrics

# Clustering subpackage including fuzzy c-means
import skfuzzy as fuzz



#make random 20 x 20 matrix that would be used
# N = 20
# b = np.random.rand(N,N)
# X = (b + b.T)/2
# i=0
# for row in range(0,N):
# 	for i in range(0,N):
# 		if row == i:
# 			a=1-X[row][i]
# 			X[row][i] = X[row][i]+a
# 			i = 0
# 			break

X = np.matrix([[ 1.,0.44254933,0.50635998,0.62063655,0.58235658,0.85457393, 0.2185287, 0.47267964,0.21196269,0.50188875,0.58268382,0.20992637, 0.20237485,0.83232669,0.98895672,0.25692385,0.37531111,0.3328554, 0.3746054, 0.32486058],
[ 0.44254933,1.,0.49028836,0.93998351,0.26206644,0.37901799, 0.27630861,0.51144521,0.11364967,0.60255213,0.65102534,0.45879028, 0.36141578,0.19200275,0.6140837, 0.48437925,0.63500673,0.41797635, 0.7239811, 0.59739425],
[ 0.50635998,0.49028836,1.,0.65118765,0.7132753, 0.2003079, 0.47517395,0.27051196,0.52901271,0.36410732,0.35153725,0.58220642, 0.36486674,0.73070929,0.56345896,0.18317944,0.3482091, 0.60027533, 0.53882896,0.24806902],
[ 0.62063655,0.93998351,0.65118765,1.,0.37315975,0.35896799, 0.31907199,0.7952832, 0.37802966,0.93989823,0.5273259, 0.39334671, 0.5926229, 0.78044329,0.08104581,0.3115166, 0.36546313,0.89061569, 0.47310985,0.98009566],
[ 0.58235658,0.26206644,0.7132753, 0.37315975,1.,0.4791323, 0.37293307,0.92016454,0.46074468,0.56260243,0.57532089,0.50501943, 0.31251161,0.55635256,0.78233753,0.13260557,0.17938949,0.17317542, 0.46097217,0.44359849],
[ 0.85457393,0.37901799,0.2003079, 0.35896799,0.4791323, 1., 0.80386731,0.16007634,0.54448871,0.6063149, 0.28312366,0.59076046, 0.47587653,0.60044316,0.17758546,0.34871966,0.10558174,0.54564744, 0.36392416,0.50656873],
[ 0.21852870,0.27630861,0.47517395,0.31907199,0.37293307,0.80386731, 1.,0.41952916,0.61509448,0.29341052,0.49974703,0.61096527, 0.69254964,0.26841545,0.33978279,0.67078683,0.97440371,0.50947361, 0.55817041,0.65229741],
[ 0.47267964,0.51144521,0.27051196,0.7952832, 0.92016454,0.16007634, 0.41952916,1.,0.22006729,0.24538811,0.41420182,0.5413308, 0.6564149, 0.34659235,0.12826815,0.3852311, 0.61571093,0.07235004, 0.37310458,0.62491293],
[ 0.21196269,0.11364967,0.52901271,0.37802966,0.46074468,0.54448871, 0.61509448,0.22006729,1.,0.29577831,0.59253831,0.42701742, 0.41504375,0.62944485,0.58373151,0.43894094,0.59467458,0.44753325, 0.46632903,0.48583292],
[ 0.50188875,0.60255213,0.36410732,0.93989823,0.56260243,0.6063149, 0.29341052,0.24538811,0.29577831,1.,0.66123089,0.1857675, 0.91506605,0.49776403,0.74133768,0.45880462,0.85692606,0.51902707, 0.22679746,0.91480856],
[ 0.58268382,0.65102534,0.35153725,0.5273259, 0.57532089,0.28312366,0.49974703,0.41420182,0.59253831,0.66123089,1,0.33722828,0.50765109,0.40459573,0.69852016,0.15078845,0.39634937,0.40377802,0.77458849,0.22179706],
[ 0.20992637,0.45879028,0.58220642,0.39334671,0.50501943,0.59076046, 0.61096527,0.5413308,0.42701742,0.1857675, 0.33722828,1., 0.36538344,0.72744722,0.36618194,0.43329885,0.58338134,0.70242053, 0.52720391,0.49348],
[ 0.20237485,0.36141578,0.36486674,0.5926229, 0.31251161,0.47587653, 0.69254964,0.6564149, 0.41504375,0.91506605,0.50765109,0.36538344, 1,0.54126435,0.8596135, 0.59398416,0.86546416,0.4394278, 0.80476363,0.52367377],
[ 0.83232669,0.19200275,0.73070929,0.78044329,0.55635256,0.60044316, 0.26841545,0.34659235,0.62944485,0.49776403,0.40459573,0.72744722, 0.54126435,1.,0.73885826,0.61090389,0.53208085,0.07075253, 0.45537699,0.73338162],
[ 0.98895672,0.6140837, 0.56345896,0.08104581,0.78233753,0.17758546, 0.33978279,0.12826815,0.58373151,0.74133768,0.69852016,0.36618194, 0.8596135, 0.73885826,1.,0.98313479,0.54737959,0.58695471, 0.62642022,0.63712822],
[ 0.25692385,0.48437925,0.18317944,0.3115166, 0.13260557,0.34871966, 0.67078683,0.3852311, 0.43894094,0.45880462,0.15078845,0.43329885, 0.59398416,0.61090389,0.98313479,1.,0.33186067,0.75422012, 0.59256469,0.39172376],
[ 0.37531111,0.63500673,0.3482091, 0.36546313,0.17938949,0.10558174, 0.97440371,0.61571093,0.59467458,0.85692606,0.39634937,0.58338134, 0.86546416,0.53208085,0.54737959,0.33186067,1.,0.48255094, 0.71124994,0.8466613 ],
[ 0.3328554, 0.41797635,0.60027533,0.89061569,0.17317542,0.54564744, 0.50947361,0.07235004,0.44753325,0.51902707,0.40377802,0.70242053, 0.4394278, 0.07075253,0.58695471,0.75422012,0.48255094,1., 0.32429101,0.84700926],
[ 0.3746054, 0.7239811, 0.53882896,0.47310985,0.46097217,0.36392416, 0.55817041,0.37310458,0.46632903,0.22679746,0.77458849,0.52720391, 0.80476363,0.45537699,0.62642022,0.59256469,0.71124994,0.32429101, 1.,0.72830164],
[ 0.32486058,0.59739425,0.24806902,0.98009566,0.44359849,0.50656873, 0.65229741,0.62491293,0.48583292,0.91480856,0.22179706,0.49348, 0.52367377,0.73338162,0.63712822,0.39172376,0.8466613, 0.84700926, 0.72830164,1.]])


y = ['INTJ', 'Jesus', 'ice', 'ENFP', 'Reagan', 'INTP', 'Badass', 'Charlie', 'Dennis', 'Mac', 'Cherry', 'ISTJ', 'God', 'Guns', 'Vanilla', 'Fire', 'seventeen', 'Frank', 'Dee', 'Snail']


#print(X)

af = AffinityPropagation(preference=0).fit(X)
print(af.predict(X))
labels = af.labels_
print("Homogeneity: %0.3f" % metrics.homogeneity_score(y, labels))

kmeans = KMeans(n_clusters=5, init='k-means++')
kmeans.fit(X,y)
print(kmeans.predict(X))

print(y)

print(kmeans.score(X))





#fpc = fuzz.cluster.cmeans( X, 3, 2, error=0.005, maxiter=1000, init=None)

# Store fpc values for later
#print(fpc)

#fuzz.cluster.cmeans_predict(X, fpc, 2, error=0.005, maxiter=1000, init=None, seed=None)



















